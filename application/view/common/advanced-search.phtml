<?php
$this->headLink()->prependStylesheet($this->assetUrl('css/advanced-search.css', 'Omeka'));

$query = isset($query) ? $query : null;
$resourceType = isset($resourceType) ? $resourceType : null;
$isPool = isset($isPool) ? $isPool : null;

$partials = [
    'common/advanced-search/fulltext',
    'common/advanced-search/properties',
    'common/advanced-search/resource-class',
];
if ($this->status()->isAdminRequest()) {
    $partials[] = 'common/advanced-search/resource-template';
}
switch ($resourceType) {
    case 'item':
        $partials[] = 'common/advanced-search/item-sets';
        if ($this->status()->isAdminRequest() && !$isPool) {
            $partials[] = 'common/advanced-search/site';
        }
        break;
    case 'media':
        $partials[] = 'common/advanced-search/media-type';
        break;
}
if ($this->status()->isAdminRequest()) {
    $partials[] = 'common/advanced-search/owner';
}
if ($this->status()->isSiteRequest()) {
    $partials[] = 'common/advanced-search/resource-template-restrict';
}

$filterResults = $this->trigger(
    'view.advanced_search',
    [
        'query' => $query,
        'resourceType' => $resourceType,
        'partials' => $partials,
    ],
    true
);
$partials = $filterResults['partials'];
?>

<div class="advanced-search-content">
<?php
foreach ($partials as $partial) {
    echo $this->partial($partial, ['query' => $query]);
}
?>
</div>
<script>
// The property values need an index.
var index = $('#property-queries .value').length;
// Prepare the multi-value templates used for duplicating values.
$('.multi-value.field').each(function() {
    var field = $(this);
    var value = field.find('.value').first().clone();
    var valueHtml = value.wrap('<div></div>').parent().html();
    field.data('field-template', valueHtml);
});
// Disable query text according to query type.
function disableQueryTextInput() {
    var queryType = $(this);
    var queryText = queryType.siblings('.query-text');
    if (queryType.val() === 'ex' || queryType.val() === 'nex') {
        queryText.prop('disabled', true);
    } else {
        queryText.prop('disabled', false);
    }
}
$('#advanced-search').find('.query-type').each(disableQueryTextInput);

// Add event handlers one time only or risk duplicating behavior.
if (!$('body').hasClass('advanced-search-loaded')) {
    // Add a multi-value.
    $(document).on('click', '.multi-value .add-value', function(e) {
        e.preventDefault();
        var fieldContainer = $(this).parents('.field');
        var template = fieldContainer.data('field-template');
        var newValue = $(template);
        newValue.children('input[type="text"]').val(null);
        newValue.children('select').prop('selectedIndex', 0);
        newValue.appendTo(fieldContainer.find('.inputs'));
        newValue.trigger('o:value-created');
    });
    // Remove a multi-value.
    $(document).on('click', '.multi-value .remove-value', function(e) {
        e.preventDefault();
        $(this).closest('.value').remove();
    });
    // Set an index to property values and increment.
    $(document).on('o:value-created', '.value', function(e) {
        var value = $(this);
        value.children(':input').attr('name', function () {
            return this.name.replace(/\[\d\]/, '[' + index + ']');
        });
        index++;
    });
    // Disable query text according to query type.
    $(document).on('change', '.query-type', disableQueryTextInput);
    // Clean the query before submitting the form.
    $('#advanced-search').on('submit', function(e) {
        Omeka.cleanSearchQuery($(this));
    });
    // Flag that the advanced form was loaded.
    $('body').addClass('advanced-search-loaded');
}
</script>

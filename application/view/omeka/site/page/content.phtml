<?php
switch ($page->layout()) {
    case 'grid':
        $pageLayoutClass = 'page-layout-grid';
        $pageLayoutData = $page->layoutData();
        $this->headStyle()->appendStyle(<<<CSS
            .page-layout-grid {
                display: grid;
                grid-template-columns: repeat({$pageLayoutData['grid_columns']}, 1fr);
                gap: 10px;
            }
            .page-layout-grid > div {
                min-height: 50px;
            }
        CSS);
        break;
    case '':
    default:
        $pageLayoutClass = 'page-layout-normal';
        break;
}
echo sprintf('<div class="blocks-inner %s">', $pageLayoutClass);
$layouts = [];
foreach ($page->blocks() as $block) {
    if (!array_key_exists($block->layout(), $layouts)) {
        // Prepare render only once per layout type.
        $layouts[$block->layout()] = null;
        $this->blockLayout()->prepareRender($block->layout());
    }
    switch ($page->layout()) {
        case 'grid':
            $blockPageLayoutData = $block->pageLayoutData();
            $gridPosition = $blockPageLayoutData['grid_position'] ?? 1;
            $gridSpan = $blockPageLayoutData['grid_span'] ?? 1;
            if ($gridPosition && $gridSpan) {
                $gridColumn = sprintf('%s / span %s', $gridPosition, $gridSpan);
            } elseif ($gridSpan) {
                $gridColumn = sprintf('span %s', $gridSpan);
            } else {
                $gridColumn = $gridPosition;
            }
            echo sprintf('<div style="grid-column: %s">%s</div>', $gridColumn, $this->blockLayout()->render($block));
            break;
        case '':
        default:
            echo $this->blockLayout()->render($block);
            break;
    }
}
echo '</div>';

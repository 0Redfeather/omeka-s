<?php
// Prepare the page layout.
$pageLayoutData = $page->layoutData();
switch ($page->layout()) {
    case 'grid':
        $pageLayoutClass = 'page-layout-grid';
        $gridColumns = (int) $pageLayoutData['grid_columns'];
        $this->headStyle()->appendStyle(<<<CSS
            .page-layout-grid {
                display: grid;
                grid-template-columns: repeat({$gridColumns}, 1fr);
                gap: 10px;
            }
            .page-layout-grid > div {
                min-height: 50px;
            }
        CSS);
        break;
    case '':
    default:
        $pageLayoutClass = 'page-layout-normal';
        break;
}
echo sprintf('<div class="blocks-inner %s">', $pageLayoutClass);
$layouts = [];
foreach ($page->blocks() as $block) {
    if (!array_key_exists($block->layout(), $layouts)) {
        // Prepare render only once per block layout type.
        $layouts[$block->layout()] = null;
        $this->blockLayout()->prepareRender($block->layout());
    }
    // Render each block according to page layout.
    switch ($page->layout()) {
        case 'grid':
            $gridColumns = (int) $pageLayoutData['grid_columns'];
            $blockPageLayoutData = $block->pageLayoutData();
            $getValidPosition = fn($columnPosition) => in_array($columnPosition, ['auto',...range(1, $gridColumns)]) ? $columnPosition : 'auto';
            $getValidSpan = fn($columnSpan) => in_array($columnSpan, range(1, $gridColumns)) ? $columnSpan : $gridColumns;
            echo sprintf(
                '<div style="grid-column: %s / span %s">%s</div>',
                $getValidPosition($blockPageLayoutData['grid_column_position'] ?? 'auto'),
                $getValidSpan($blockPageLayoutData['grid_column_span'] ?? '1'),
                $this->blockLayout()->render($block)
            );
            break;
        case '':
        default:
            echo $this->blockLayout()->render($block);
            break;
    }
}
echo '</div>';

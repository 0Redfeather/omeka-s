<?php
$this->htmlElement('body')->appendAttribute('class', 'site-pages add sidebar-open');
$this->headScript()->appendFile($this->assetUrl('js/sortable.js', 'Omeka'));
$this->ckEditor();
$this->blockLayout()->prepareForm();
$form->prepare();
$escape = $this->plugin('escapeHtml');
?>
<?php echo $this->pageTitle(sprintf($this->translate('Edit Page: “%s”'), $page->title())); ?>

<?php echo $this->form()->openTag($form); ?>
<div id="page-actions">
    <a href="<?php echo $page->siteUrl(); ?>" class="button"><?php echo $this->translate('View'); ?></a>
    <button><?php echo $this->translate('Save'); ?></button>
</div>

<div class="breadcrumbs">
    <?php echo $site->link($site->title(), null, array('class' => 'page-site')); ?>
    <span class="page-title"><?php echo $page->title(); ?></span>
</div>

<?php echo $this->formElements($form); ?>

<?php echo $this->blockLayout()->forms($page); ?>

<?php echo $this->form()->closeTag(); ?>

<div class="active sidebar">
    <label for="new-block">
        <?php echo $this->translate('Add New Block'); ?>
    </label>
    <select id="new-block">
        <option value=""><?php echo $this->translate('Select layout'); ?></option>
        <?php foreach ($this->blockLayout()->getLayouts() as $layout): ?>
        <option value="<?php echo $escape($layout); ?>">
            <?php echo $escape($this->blockLayout()->getLayoutLabel($layout)); ?>
        </option>
        <?php endforeach; ?>
    </select>
</div>

<?php echo $this->partial('common/resource-select-sidebar'); ?>

<?php echo $this->partial('common/attachment-sidebar'); ?>

<script type="text/javascript">
function wysiwyg(context) {
    var config = {
        toolbar:
        [
            ['Source', 'Undo', 'Redo', 'PasteFromWord'],
            '/',
            ['Bold', 'Italic', 'Underline', 'Link', 'Unlink']
        ],
        height: '96px'
    };
    context.find('textarea.full.wysiwyg').ckeditor();
    context.find('textarea.caption.wysiwyg').ckeditor(config);
    $('textarea.caption.wysiwyg').ckeditor(config);
}

var list = document.getElementById('blocks');
new Sortable(list, {
    draggable: ".block",
    handle: ".sortable-handle"
});

$('#new-block').change(function() {
    $.post(
        '<?php echo $this->url('admin/site/page', array('action' => 'block'), true); ?>',
        {layout: $(this).val()}
    ).done(function(data) {
        var newBlock = $(data).appendTo('#blocks');
        newBlock.trigger('o:block-added');
        Omeka.scrollTo(newBlock);
    });
    $(this).val(''); // reset select
});

$('#blocks').on('o:block-added', '.block', function () {
    wysiwyg($(this));
});
wysiwyg($('#blocks'));

$('body').on('click', '.item-options', function(e) {
    e.preventDefault();
    var context = $(this);
    $('.selecting-attachment').removeClass('selecting-attachment');
    context.parents('.attachment').addClass('selecting-attachment');
    Omeka.openSidebar(context, '#item-options');
    var itemThumbnail = $('.selecting-attachment .item-title img').clone();
    var itemTitle = $('.selecting-attachment .item-title').text();
    $('#item-options .current-item').attr('data-item-id', $('.selecting-attachment .item').val());
    $('#item-options').find('.item-title').text(itemTitle);
    if ($('#item-options .current-item img').length < 1) {
        itemThumbnail.insertBefore($('#item-options .item-title'));
    } else {
        $('#item-options .current-item img').replaceWith(itemThumbnail);
    }
    $('#item-options .caption.wysiwyg').val($('.selecting-attachment .caption').val());
});

$('body').on('click', '.item-select', function(e) {
    e.preventDefault();
    var context = $(this);
    Omeka.openSidebar(context, '#select-resource');
    $('#select-resource').css('z-index', $('#item-options').css('z-index') + 1);
});

$('#select-item a').on('o:resource-selected', function(e) {
    var resource = $('.resource-details').data('resource-values');
    var resourceThumbnail = '<img src="' + resource.thumbnail_url + '" title="' + resource.thumbnail_title + '" alt="' + resource.thumbnail_type + ' thumbnail">';
    var itemOptions = $('#item-options');
    itemOptions.find('.current-item').attr('data-item-id', resource.value_resource_id);
    itemOptions.find('img').remove();
    itemOptions.find('.item-title').html(resource.display_title).before(resourceThumbnail);
    $('#select-resource').removeClass('active');
});

$('.confirm-panel button').on('click', function(e) {
    e.preventDefault();
    var selecting = $('.attachment.selecting-attachment');
    var currentItem = $('#item-options .current-item');
    selecting.find('.item').val(currentItem.attr('data-item-id'));
    selecting.find('.item-title').text(currentItem.find('.item-title').text()).prepend(currentItem.find('img'));
    selecting.find('.caption').val($('#item-options .caption').val());
    $('#item-options').removeClass('active');
});

$('a.remove-value, a.restore-value').click(function(e) {
    e.preventDefault();
    var block = $(this).parents('.block');
    block.toggleClass('delete');
    block.find('a.remove-value, a.restore-value').show();
    $(this).hide();
});

$('form').submit(function(e) {
    $('#blocks .block').each(function(blockIndex) {
        var thisBlock = $(this);
        if (thisBlock.hasClass('delete')) {
            thisBlock.find(':input').prop('disabled', true);
        } else {
            replaceIndex(thisBlock, 'blockIndex', blockIndex);
            thisBlock.find('.attachments .attachment').each(function(attachmentIndex) {
                var thisAttachment = $(this);
                replaceIndex(thisAttachment, 'attachmentIndex', attachmentIndex);
            });
        }
    });
});
function replaceIndex(context, find, index) {
    context.find(':input').each(function() {
        var thisInput = $(this);
        if ($(this).attr('name') == undefined) {
            return;
        }
        var name = thisInput.attr('name').replace('[__' + find + '__]', '[' + index + ']');
        thisInput.attr('name', name);
    });
}

// Toggle attachment status

$('#blocks').on('click', '.delete,.undo', function(e) {
    e.preventDefault();
    $(this).parents('.attachment').toggleClass('delete');
});

// Make attachments sortable.
$('#blocks').on('o:block-added', '.block', function () {
    new Sortable($(this).children('.attachments')[0], {
        draggable: ".attachment",
        handle: ".sortable-handle"
    });
});
$('.attachments').each(function() {
    new Sortable(this, {
        draggable: ".attachment",
        handle: ".sortable-handle"
    });
});

// Append attachment.
$('#blocks').on('click', '.attachment-add', function(e) {
    var attachments = $(this).siblings('.attachments');
    var template = $(attachments.data('template'));
    template.find('.item-title').text('No item selected');
    template.find('input').val(null);
    attachments.append(template);
});
</script>

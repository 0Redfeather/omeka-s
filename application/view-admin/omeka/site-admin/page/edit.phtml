<?php
$this->htmlElement('body')->appendAttribute('class', 'site-pages add sidebar-open');
$this->headScript()->appendFile($this->assetUrl('js/sortable.js', 'Omeka'));
$this->ckEditor();
$this->blockLayout()->prepareForm();
$form->prepare();
$escape = $this->plugin('escapeHtml');
?>
<?php echo $this->pageTitle(sprintf($this->translate('Edit Page: “%s”'), $page->title())); ?>

<?php echo $this->form()->openTag($form); ?>
<div id="page-actions">
    <a href="<?php echo $page->siteUrl(); ?>" class="button"><?php echo $this->translate('View'); ?></a>
    <button><?php echo $this->translate('Save'); ?></button>
</div>

<div class="breadcrumbs">
    <?php echo $site->link($site->title(), null, array('class' => 'page-site')); ?>
    <span class="page-title"><?php echo $page->title(); ?></span>
</div>

<?php echo $this->formElements($form); ?>

<?php echo $this->blockLayout()->forms($page); ?>

<?php echo $this->form()->closeTag(); ?>

<div class="active sidebar">
    <label for="new-block">
        <?php echo $this->translate('Add New Block'); ?>
    </label>
    <select id="new-block">
        <option value=""><?php echo $this->translate('Select layout'); ?></option>
        <?php foreach ($this->blockLayout()->getLayouts() as $layout): ?>
        <option value="<?php echo $escape($layout); ?>">
            <?php echo $escape($this->blockLayout()->getLayoutLabel($layout)); ?>
        </option>
        <?php endforeach; ?>
    </select>
</div>

<div id="attachment-options" class="sidebar" data-url="<?php echo $this->url(null, ['action' => 'attachment-item-options'], true); ?>">
    <a href="#" class="sidebar-close o-icon-close"><span class="screen-reader-text"><?php echo $this->translate('Close Me'); ?></span></a>
    <h2><?php echo $this->translate('Attachment'); ?></h2>
    <button id="attachment-item-select" data-sidebar-content-url="<?php echo $escape($this->url(
        'admin/default',
        ['controller' => 'item', 'action' => 'sidebar-select'],
        ['query' => $site->itemPool()]
    )); ?>"><?php echo $this->translate('Select item'); ?></button>
    <div id="attachment-item"></div>
    <div id="attachment-caption" class="option">
        <h3><?php echo $this->translate('Caption'); ?></h3>
        <a href="#" class="collapse" aria-label="<?php echo $this->translate('Collapse'); ?>" title="<?php echo $this->translate('Collapse'); ?>"></a>
        <div class="collapsible">
            <textarea class="caption wysiwyg"></textarea>
        </div>
    </div>
    <div id="attachment-confirm-panel" class="confirm-panel">
        <button><?php echo $this->translate('Apply changes'); ?></button>
    </div>
</div>

<?php echo $this->partial('common/resource-select-sidebar'); ?>

<script type="text/javascript">
function wysiwyg(context) {
    var config = {
        toolbar:
        [
            ['Source', 'Undo', 'Redo', 'PasteFromWord'],
            '/',
            ['Bold', 'Italic', 'Underline', 'Link', 'Unlink']
        ],
        height: '96px'
    };
    context.find('textarea.full.wysiwyg').ckeditor();
    context.find('textarea.caption.wysiwyg').ckeditor(config);
    $('textarea.caption.wysiwyg').ckeditor(config);
}

var list = document.getElementById('blocks');
new Sortable(list, {
    draggable: ".block",
    handle: ".sortable-handle"
});

$('#new-block').change(function() {
    $.post(
        '<?php echo $this->url('admin/site/page', array('action' => 'block'), true); ?>',
        {layout: $(this).val()}
    ).done(function(data) {
        var newBlock = $(data).appendTo('#blocks');
        newBlock.trigger('o:block-added');
        Omeka.scrollTo(newBlock);
    });
    $(this).val(''); // reset select
});

$('#blocks').on('o:block-added', '.block', function () {
    wysiwyg($(this));
});
wysiwyg($('#blocks'));

$('a.remove-value, a.restore-value').click(function(e) {
    e.preventDefault();
    var block = $(this).parents('.block');
    block.toggleClass('delete');
    block.find('a.remove-value, a.restore-value').show();
    $(this).hide();
});

$('form').submit(function(e) {
    $('#blocks .block').each(function(blockIndex) {
        var thisBlock = $(this);
        if (thisBlock.hasClass('delete')) {
            thisBlock.find(':input').prop('disabled', true);
        } else {
            replaceIndex(thisBlock, 'blockIndex', blockIndex);
            thisBlock.find('.attachments .attachment').each(function(attachmentIndex) {
                var thisAttachment = $(this);
                replaceIndex(thisAttachment, 'attachmentIndex', attachmentIndex);
            });
        }
    });
});
function replaceIndex(context, find, index) {
    context.find(':input').each(function() {
        var thisInput = $(this);
        if ($(this).attr('name') == undefined) {
            return;
        }
        var name = thisInput.attr('name').replace('[__' + find + '__]', '[' + index + ']');
        thisInput.attr('name', name);
    });
}

// Toggle attachment status

$('#blocks').on('click', '.delete,.undo', function(e) {
    e.preventDefault();
    var attachment = $(this).parents('.attachment');
    attachment.toggleClass('delete');
    if (attachment.hasClass('delete')) {
        attachment.find('input[type="hidden"]').each(function() {
            $(this).attr('disabled', 'disabled');
        });
    } else {
        attachment.find('input[type="hidden"]').each(function() {
            $(this).removeAttr('disabled');
        });
    }
});

// Make attachments sortable.
$('#blocks').on('o:block-added', '.block', function () {
    new Sortable($(this).children('.attachments')[0], {
        draggable: ".attachment",
        handle: ".sortable-handle"
    });
});
$('.attachments').each(function() {
    new Sortable(this, {
        draggable: ".attachment",
        handle: ".sortable-handle"
    });
});

// Append attachment.
$('#blocks').on('click', '.attachment-add', function(e) {
    var attachments = $(this).siblings('.attachments');
    var template = $(attachments.data('template'));
    attachments.append(template);
});

/**
 * Open the attachment options sidebar.
 *
 * @param int itemId The attached item ID, if any
 * @param int mediaId The attached media ID, if any
 * @param str caption The attachment caption, if any
 */
function openAttachmentOptions(itemId, mediaId, caption)
{
    var attachmentItem = $('#attachment-item');
    attachmentItem.data('itemId', itemId);
    attachmentItem.data('mediaId', mediaId);
    $.post(
        $('#attachment-options').data('url'),
        {itemId: itemId, mediaId: mediaId}
    ).done(function(data) {
        attachmentItem.html(data);
        $('#attachment-caption .caption').val(caption);
        Omeka.openSidebar($(this), '#attachment-options');
        $('#attachment-options').scrollTop(0);
    });
}

// Open attachment options sidebar after selecting attachment.
$('body').on('click', '.attachment-options-icon', function(e) {
    e.preventDefault();
    var attachment = $(this).closest('.attachment');
    $('.selecting-attachment').removeClass('selecting-attachment');
    attachment.addClass('selecting-attachment');
    openAttachmentOptions(
        attachment.find('input.item').val(),
        attachment.find('input.media').val(),
        attachment.find('input.caption').val()
    );
});

// Enable item selection for attachments.
$('#attachment-item-select').on('click', function(e) {
    e.preventDefault();
    Omeka.openSidebar($(this), '#select-resource');
});

// Update attachment options sidebar after selecting item.
$('#select-item a').on('o:resource-selected', function(e) {
    var resource = $('.resource-details').data('resource-values');
    openAttachmentOptions(resource.value_resource_id, resource.primary_media_id);
    $('#select-resource').removeClass('active');
});

// Change attached media.
$('#attachment-item').on('click', 'li.media', function(e) {
    var media = $(this);
    var attachmentItem = $('#attachment-item');

    // Set hidden data.
    attachmentItem.data('mediaId', media.data('media-id'));

    // Set visual elements.
    attachmentItem.find('li.media').removeClass('attached');
    media.addClass('attached');
    attachmentItem.find('img.item-thumbnail').attr('src', media.find('img.media-thumbnail').attr('src'));
});

// Apply changes to the attachments form.
$('#attachment-confirm-panel button').on('click', function(e) {
    e.preventDefault();
    $('#attachment-options').removeClass('active');
    var item = $('#attachment-item');
    var caption = $('#attachment-caption .caption').val();
    var attachment = $('.selecting-attachment');

    // Set hidden data.
    attachment.find('input.item').val(item.data('itemId'));
    attachment.find('input.media').val(item.data('mediaId'));
    attachment.find('input.caption').val(caption);

    // Set visual elements.
    var title = item.find('.item-title').html();
    if (title) {
        var thumbnail;
        var thumbnailUrl = item.find('.item-thumbnail').attr('src');
        if (thumbnailUrl) {
            thumbnail = $('<img>', {src: thumbnailUrl});
        }
        attachment.find('.item-title').empty().append(thumbnail).append(title);
    }
});
</script>

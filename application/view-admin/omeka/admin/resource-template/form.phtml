<?php
$form->prepare();
$escape = $this->plugin('escapeHtml');
$this->headScript()->appendFile($this->assetUrl('js/sortable.js', 'Omeka'));
?>

<?php echo $this->form()->openTag($form); ?>
<div id="page-actions">
    <?php if (isset($resourceTemplate)): ?>
    <a href="#" class="delete button sidebar-confirm"><?php echo $this->translate('Delete'); ?></a>
    <?php endif; ?>
    <button><?php echo $escape($submitLabel); ?></button>
</div>

<?php $labelElement = $form->get('o:label'); ?>
<div class="field">
    <div class="field-meta">
        <?php echo $this->formLabel($labelElement); ?>
    </div>
    <div class="inputs">
        <?php echo $this->formElement($labelElement); ?>
    </div>
    <?php echo $this->formElementErrors($labelElement, ['class' => 'messages']); ?>
</div>
<div class="field">
    <div class="field-meta">
        <label for="o:resource_class[o:id]"><?php echo $this->translate('Suggested Class'); ?></label>
    </div>
    <div class="inputs">
        <?php echo $this->resourceClassSelect()->setValue($resourceClassId)->render('o:resource_class[o:id]'); ?>
    </div>
</div>
<ul id="properties">
    <li>
        <div class="property-heading" id="original-label"><?php echo $this->translate('Label'); ?></div>
        <div class="property-heading" id="alternate-label"><?php echo $this->translate('Alternate Comment'); ?></div>
        <div class="property-heading" id="alternate-comment"><?php echo $this->translate('Data Type'); ?></div>
    </li>
    <?php foreach ($propertyRows as $propertyRow): ?>
    <?php echo $this->partial(
        'omeka/admin/resource-template/show-property-row',
        ['propertyRow' => $propertyRow]
    ) ?>
    <?php endforeach; ?>
</ul>

<?php echo $this->formElement($form->get('csrf')); ?>
<?php echo $this->form()->closeTag(); ?>

<?php echo $this->propertySelector(); ?>
<?php if (isset($resourceTemplate)): ?>
    <?php echo $this->deleteConfirm($resourceTemplate, 'resource template'); ?>
<?php endif; ?>

<script>
// Enable sorting on property rows.
var list = document.getElementById('properties');
new Sortable(list, {
    draggable: ".property",
    handle: ".sortable-handle"
});

// Add property row via the property selector.
$('#property-selector .selector-child').click(function(event) {
    event.preventDefault();
    var propertyId = $(this).closest('li').data('property-id');
    if ($('#properties tbody tr[data-property-id="' + propertyId + '"]').length) {
        // Resource templates cannot be assigned duplicate properties.
        return;
    }
    var url = '<?php echo $this->escapeJs($this->url(null, ['action' => 'add-new-property-row'], true)); ?>';
    $.get(url, {property_id: propertyId})
        .done(function(data) {
            $('#properties').append(data);
        });
});

// Remove property via the delete icon.
$('#content').on('click', '.resource-template-property-remove', function(event) {
    event.preventDefault();

    var removeLink = $(this);
    var propertyRow =  removeLink.closest('li.property.row');
    var propertyId = propertyRow.data('property-id');

    // Remove the property ID element from the form.
    var propertyIdElement = propertyRow.children('.property-id-element');
    propertyRow.data('property-id-element', propertyIdElement);
    propertyIdElement.remove();

    // Undo remove property link.
    var undoRemoveLink = $('<a>', {
        href: '#',
        class: 'fa fa-undo',
        title: 'Undo remove property',
        click: function(event) {
            event.preventDefault();
            propertyRow.toggleClass('delete');
            propertyRow.append(propertyRow.data('property-id-element'));
            removeLink.show();
            $(this).remove();
        },
    });

    propertyRow.toggleClass('delete');
    undoRemoveLink.insertAfter(removeLink);
    removeLink.hide();
});
</script>
